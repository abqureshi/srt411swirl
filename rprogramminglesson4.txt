Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Sequences of Numbers    
 3: Vectors                    4: Missing Values          
 5: Subsetting Vectors         6: Matrices and Data Frames
 7: Logic                      8: lapply and sapply       
 9: vapply and tapply         10: Looking at Data         
11: Simulation                12: Dates and Times         


Selection: 4

  |                                                                             |   0%

| Missing values play an important role in statistics and data analysis. Often,
| missing values must not be ignored, but rather they should be carefully studied to
| see if there's an underlying pattern or cause for their missingness.

...

  |====                                                                         |   5%

| In R, NA is used to represent any value that is 'not available' or 'missing' (in the
| statistical sense). In this lesson, we'll explore missing values further.

...

  |========                                                                     |  10%

| Any operation involving NA generally yields NA as the result. To illustrate, let's
| create a vector c(44, NA, 5, NA) and assign it to a variable x.

> 
> x <- c(44,NA,5,NA)

| You got it right!

  |============                                                                 |  15%

| Now, let's multiply x by 3.

> x *3
[1] 132  NA  15  NA

| Your dedication is inspiring!

  |===============                                                              |  20%

| Notice that the elements of the resulting vector that correspond with the NA values
| in x are also NA.

...

  |===================                                                          |  25%

| To make things a little more interesting, lets create a vector containing 1000 draws
| from a standard normal distribution with y <- rnorm(1000).

> 
> 
> y <- rnorm(1000)

| You are really on a roll!

  |=======================                                                      |  30%

| Next, let's create a vector containing 1000 NAs with z <- rep(NA, 1000).

> z <- rep(NA, 1000)

| You are doing so well!

  |===========================                                                  |  35%

| Finally, let's select 100 elements at random from these 2000 values (combining y and
| z) such that we don't know how many NAs we'll wind up with or what positions they'll
| occupy in our final vector -- my_data <- sample(c(y, z), 100).

> my_data <- sample(c(y, z), 100)

| You are doing so well!

  |===============================                                              |  40%

| Let's first ask the question of where our NAs are located in our data. The is.na()
| function tells us whether each element of a vector is NA. Call is.na() on my_data
| and assign the result to my_na.

> my_na <- is.na(my_data)

| You are amazing!

  |===================================                                          |  45%

| Now, print my_na to see what you came up with.

> my_na
  [1]  TRUE  TRUE  TRUE FALSE  TRUE FALSE FALSE  TRUE  TRUE FALSE  TRUE FALSE FALSE
 [14]  TRUE  TRUE  TRUE FALSE  TRUE FALSE FALSE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE
 [27]  TRUE FALSE FALSE  TRUE FALSE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE  TRUE
 [40] FALSE FALSE  TRUE FALSE  TRUE FALSE FALSE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE
 [53] FALSE  TRUE  TRUE  TRUE FALSE FALSE  TRUE FALSE FALSE FALSE  TRUE  TRUE  TRUE
 [66] FALSE  TRUE  TRUE  TRUE  TRUE FALSE FALSE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE
 [79]  TRUE FALSE  TRUE  TRUE FALSE  TRUE FALSE  TRUE FALSE FALSE  TRUE FALSE  TRUE
 [92] FALSE  TRUE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE

| You are doing so well!

  |======================================                                       |  50%

| Everywhere you see a TRUE, you know the corresponding element of my_data is NA.
| Likewise, everywhere you see a FALSE, you know the corresponding element of my_data
| is one of our random draws from the standard normal distribution.

...

  |==========================================                                   |  55%

| In our previous discussion of logical operators, we introduced the `==` operator as
| a method of testing for equality between two objects. So, you might think the
| expression my_data == NA yields the same results as is.na(). Give it a try.

> 
> my_data == NA
  [1] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [28] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [55] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA
 [82] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA

| You got it right!

  |==============================================                               |  60%

| The reason you got a vector of all NAs is that NA is not really a value, but just a
| placeholder for a quantity that is not available. Therefore the logical expression
| is incomplete and R has no choice but to return a vector of the same length as
| my_data that contains all NAs.

...

  |==================================================                           |  65%

| Don't worry if that's a little confusing. The key takeaway is to be cautious when
| using logical expressions anytime NAs might creep in, since a single NA value can
| derail the entire thing.

...

  |======================================================                       |  70%

| So, back to the task at hand. Now that we have a vector, my_na, that has a TRUE for
| every NA and FALSE for every numeric value, we can compute the total number of NAs
| in our data.

...

  |==========================================================                   |  75%

| The trick is to recognize that underneath the surface, R represents TRUE as the
| number 1 and FALSE as the number 0. Therefore, if we take the sum of a bunch of
| TRUEs and FALSEs, we get the total number of TRUEs.

...

  |==============================================================               |  80%

| Let's give that a try here. Call the sum() function on my_na to count the total
| number of TRUEs in my_na, and thus the total number of NAs in my_data. Don't assign
| the result to a new variable.

> 
> sum(my)na
Error: unexpected symbol in "sum(my)na"
> sum(myna)
Error: object 'myna' not found
> sum(my_na)
[1] 54

| That's the answer I was looking for.

  |=================================================================            |  85%

| Pretty cool, huh? Finally, let's take a look at the data to convince ourselves that
| everything 'adds up'. Print my_data to the console.

> 
> my_data
  [1]          NA          NA          NA -0.36635912          NA  0.90585337
  [7]  0.89097553          NA          NA  3.11964402          NA  0.17999112
 [13]  1.85115744          NA          NA          NA  0.81420274          NA
 [19]  1.33961885 -0.15294616          NA          NA          NA  2.06732886
 [25]          NA          NA          NA -0.31002231 -0.07370625          NA
 [31] -0.20447629          NA          NA          NA -0.08201517 -0.62976496
 [37]  0.36366117  0.59206538          NA  0.90945504 -0.69020193          NA
 [43]  0.72600358          NA  0.41813441  0.40844066          NA          NA
 [49]          NA          NA  1.70443674          NA -1.40767840          NA
 [55]          NA          NA  0.08291529 -0.51151065          NA -1.91376389
 [61] -1.47572635 -1.00721718          NA          NA          NA -1.12974761
 [67]          NA          NA          NA          NA -0.52785030 -0.51280012
 [73]          NA          NA          NA          NA  0.71507488          NA
 [79]          NA -0.53260740          NA          NA -0.32325820          NA
 [85]  0.34533886          NA -0.32770753 -0.55028099          NA -0.93847210
 [91]          NA  0.68296086          NA -0.80428440  0.27333686 -0.27576471
 [97] -1.34672836          NA  0.60757536  1.11530418

| You are really on a roll!

  |=====================================================================        |  90%

| Now that we've got NAs down pat, let's look at a second type of missing value --
| NaN, which stands for 'not a number'. To generate NaN, try dividing (using a forward
| slash) 0 by 0 now.

> 
> 0/0
[1] NaN

| You got it right!

  |=========================================================================    |  95%

| Let's do one more, just for fun. In R, Inf stands for infinity. What happens if you
| subtract Inf from Inf?

> Inf-Inf
[1] NaN

| You are doing so well!

  |=============================================================================| 100%

| Would you like to inform someone about your successful completion of this lesson?

1: Yes
2: No

Selection: 1
| What is your full name?
abqureshi@myseneca.ca
| What is the email address of the person you'd like to notify?
mike.martin@senecacollege.ca

Does everything look good?

Your name: abqureshi@myseneca.ca
Send to: mike.martin@senecacollege.ca

1: Yes
2: No

Selection: 1

#####################################################################################

I just tried to create a new email with the following info:

To: mike.martin@senecacollege.ca
Subject: abqureshi@myseneca.ca just completed R Programming - Missing Values
Body: <empty>

If it didn't work, you can send the same email manually.

#####################################################################################


| That's the answer I was looking for.

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.