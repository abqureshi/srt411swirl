10 x86_64 linux-gnu     hflights
..    ...       ...          ...
Variables not shown: version (chr),
  country (chr)

| All that practice is paying off!

  |=============================                                                |  37%

| We can also select the same columns
| in reverse order. Give it a try.

> select(cran, country:r_arch)
Source: local data frame [225,468 x 5]

   country version      package
1       US   0.2.4    htmltools
2       US 0.10-32      tseries
3       US  1.0-15        party
4       US  3.14-4        Hmisc
5       CA   0.6.4       digest
6       US   4.6-7 randomForest
7       US   1.8.1         plyr
8       US   0.3-2      whisker
9       CN  0.10.4         Rcpp
10      US     0.1     hflights
..     ...     ...          ...
Variables not shown: r_os (chr),
  r_arch (chr)

| Your dedication is inspiring!

  |==============================                                               |  39%

| Print the entire dataset again, just
| to remind yourself of what it looks
| like. You can do this at anytime
| during the lesson.

> cran
Source: local data frame [225,468 x 11]

    X       date     time    size
1   1 2014-07-08 00:54:41   80589
2   2 2014-07-08 00:59:53  321767
3   3 2014-07-08 00:47:13  748063
4   4 2014-07-08 00:48:05  606104
5   5 2014-07-08 00:46:50   79825
6   6 2014-07-08 00:48:04   77681
7   7 2014-07-08 00:48:35  393754
8   8 2014-07-08 00:47:30   28216
9   9 2014-07-08 00:54:58    5928
10 10 2014-07-08 00:15:35 2206029
.. ..        ...      ...     ...
Variables not shown: r_version (chr),
  r_arch (chr), r_os (chr), package
  (chr), version (chr), country (chr),
  ip_id (int)

| You're the best!

  |===============================                                              |  41%

| Instead of specifying the columns we
| want to keep, we can also specify
| the columns we want to throw away.
| To see how this works, do
| select(cran, -time) to omit the time
| column.

> 
> select(cran, -time)
Source: local data frame [225,468 x 10]

    X       date    size r_version
1   1 2014-07-08   80589     3.1.0
2   2 2014-07-08  321767     3.1.0
3   3 2014-07-08  748063     3.1.0
4   4 2014-07-08  606104     3.1.0
5   5 2014-07-08   79825     3.0.2
6   6 2014-07-08   77681     3.1.0
7   7 2014-07-08  393754     3.1.0
8   8 2014-07-08   28216     3.0.2
9   9 2014-07-08    5928        NA
10 10 2014-07-08 2206029     3.0.2
.. ..        ...     ...       ...
Variables not shown: r_arch (chr),
  r_os (chr), package (chr), version
  (chr), country (chr), ip_id (int)

| You got it!

  |=================================                                            |  42%

| The negative sign in front of time
| tells select() that we DON'T want
| the time column. Now, let's combine
| strategies to omit all columns from
| X through size (X:size). To see how
| this might work, let's look at a
| numerical example with -5:20.

> -5:20
 [1] -5 -4 -3 -2 -1  0  1  2  3  4  5
[12]  6  7  8  9 10 11 12 13 14 15 16
[23] 17 18 19 20

| Nice work!

  |==================================                                           |  44%

| Oops! That gaves us a vector of
| numbers from -5 through 20, which is
| not what we want. Instead, we want
| to negate the entire sequence of
| numbers from 5 through 20, so that
| we get -5, -6, -7, ... , -18, -19,
| -20. Try the same thing, except
| surround 5:20 with parentheses so
| that R knows we want it to first
| come up with the sequence of
| numbers, then apply the negative
| sign to the whole thing.

> 
> -(5:20)
 [1]  -5  -6  -7  -8  -9 -10 -11 -12
 [9] -13 -14 -15 -16 -17 -18 -19 -20

| You are doing so well!

  |===================================                                          |  46%

| Use this knowledge to omit all
| columns X:size using select().

> select(cran, -(X:size))
Source: local data frame [225,468 x 7]

   r_version r_arch      r_os
1      3.1.0 x86_64   mingw32
2      3.1.0 x86_64   mingw32
3      3.1.0 x86_64 linux-gnu
4      3.1.0 x86_64 linux-gnu
5      3.0.2 x86_64 linux-gnu
6      3.1.0 x86_64 linux-gnu
7      3.1.0 x86_64 linux-gnu
8      3.0.2 x86_64 linux-gnu
9         NA     NA        NA
10     3.0.2 x86_64 linux-gnu
..       ...    ...       ...
Variables not shown: package (chr),
  version (chr), country (chr), ip_id
  (int)

| You nailed it! Good job!

  |=====================================                                        |  47%

| Now that you know how to select a
| subset of columns using select(), a
| natural next question is "How do I
| select a subset of rows?" That's
| where the filter() function comes
| in.

...

  |======================================                                       |  49%

| Use filter(cran, package == "swirl")
| to select all rows for which the
| package variable is equal to
| "swirl". Be sure to use two equals
| signs side-by-side!

> 
> filter(cran, package == "swirl")
Source: local data frame [820 x 11]

      X       date     time   size
1    27 2014-07-08 00:17:16 105350
2   156 2014-07-08 00:22:53  41261
3   358 2014-07-08 00:13:42 105335
4   593 2014-07-08 00:59:45 105465
5   831 2014-07-08 00:55:27 105335
6   997 2014-07-08 00:33:06  41261
7  1023 2014-07-08 00:35:36 106393
8  1144 2014-07-08 00:00:39 106534
9  1402 2014-07-08 00:41:41  41261
10 1424 2014-07-08 00:44:49 106393
..  ...        ...      ...    ...
Variables not shown: r_version (chr),
  r_arch (chr), r_os (chr), package
  (chr), version (chr), country (chr),
  ip_id (int)

| You're the best!

  |=======================================                                      |  51%

| Again, note that filter() recognizes
| 'package' as a column of cran,
| without you having to explicitly
| specify cran$package.

...

  |========================================                                     |  53%

| The == operator asks whether the
| thing on the left is equal to the
| thing on the right. If yes, then it
| returns TRUE. If no, then FALSE. In
| this case, package is an entire
| vector (column) of values, so
| package == "swirl" returns a vector
| of TRUEs and FALSEs. filter() then
| returns only the rows of cran
| corresponding to the TRUEs.

...

  |==========================================                                   |  54%

| You can specify as many conditions
| as you want, separated by commas.
| For example filter(cran, r_version
| == "3.1.1", country == "US") will
| return all rows of cran
| corresponding to downloads from
| users in the US running R version
| 3.1.1. Try it out.

> filter(cran, r_version == "3.1.1", country == "US")
Source: local data frame [1,588 x 11]

       X       date     time    size
1   2216 2014-07-08 00:48:58  385112
2  17332 2014-07-08 03:39:57  197459
3  17465 2014-07-08 03:25:38   23259
4  18844 2014-07-08 03:59:17  190594
5  30182 2014-07-08 04:13:15   77683
6  30193 2014-07-08 04:06:26 2351969
7  30195 2014-07-08 04:07:09  299080
8  30217 2014-07-08 04:32:04  568036
9  30245 2014-07-08 04:10:41  526858
10 30354 2014-07-08 04:32:51 1763717
..   ...        ...      ...     ...
Variables not shown: r_version (chr),
  r_arch (chr), r_os (chr), package
  (chr), version (chr), country (chr),
  ip_id (int)

| All that practice is paying off!

  |===========================================                                  |  56%

| The conditions passed to filter()
| can make use of any of the standard
| comparison operators. Pull up the
| relevant documentation with
| ?Comparison (that's an uppercase C).

> 
> ?comparison
No documentation for ‘comparison’ in specified packages and libraries:
you could try ‘??comparison’

| Not exactly. Give it another go. Or,
| type info() for more options.

| ?Comparison will pull up the
| relevant help file.

> 
> filter(cran, r_version <= "3.0.2", country == "IN")
Source: local data frame [4,139 x 11]

       X       date     time     size
1    348 2014-07-08 00:44:04 10218907
2   9990 2014-07-08 02:11:32   397497
3   9991 2014-07-08 02:11:32   119199
4   9992 2014-07-08 02:11:33    81779
5  10022 2014-07-08 02:19:45  1557078
6  10023 2014-07-08 02:19:46  1184285
7  10189 2014-07-08 02:38:06   908854
8  10199 2014-07-08 02:38:28   178436
9  10200 2014-07-08 02:38:29    51811
10 10201 2014-07-08 02:38:29    65245
..   ...        ...      ...      ...
Variables not shown: r_version (chr),
  r_arch (chr), r_os (chr), package
  (chr), version (chr), country (chr),
  ip_id (int)

| That's not exactly what I'm looking
| for. Try again. Or, type info() for
| more options.

| ?Comparison will pull up the
| relevant help file.

> 
> ?comparison
No documentation for ‘comparison’ in specified packages and libraries:
you could try ‘??comparison’

| Not quite right, but keep trying.
| Or, type info() for more options.

| ?Comparison will pull up the
| relevant help file.

> ?Comparison

| You are really on a roll!

  |============================================                                 |  58%

| Edit your previous call to filter()
| to instead return rows corresponding
| to users in "IN" (India) running an
| R version that is less than or equal
| to "3.0.2". The up arrow on your
| keyboard may come in handy here.
| Don't forget your double quotes!

> 
> filter(cran, r_version <= "3.0.2", country == "IN")
Source: local data frame [4,139 x 11]

       X       date     time     size
1    348 2014-07-08 00:44:04 10218907
2   9990 2014-07-08 02:11:32   397497
3   9991 2014-07-08 02:11:32   119199
4   9992 2014-07-08 02:11:33    81779
5  10022 2014-07-08 02:19:45  1557078
6  10023 2014-07-08 02:19:46  1184285
7  10189 2014-07-08 02:38:06   908854
8  10199 2014-07-08 02:38:28   178436
9  10200 2014-07-08 02:38:29    51811
10 10201 2014-07-08 02:38:29    65245
..   ...        ...      ...      ...
Variables not shown: r_version (chr),
  r_arch (chr), r_os (chr), package
  (chr), version (chr), country (chr),
  ip_id (int)

| That's the answer I was looking for.

  |==============================================                               |  59%

| Our last two calls to filter()
| requested all rows for which some
| condition AND another condition were
| TRUE. We can also request rows for
| which EITHER one condition OR
| another condition are TRUE. For
| example, filter(cran, country ==
| "US" | country == "IN") will gives
| us all rows for which the country
| variable equals either "US" or "IN".
| Give it a go.

> 
> filter(cran, country == "US" | country == "IN")
Source: local data frame [95,283 x 11]

    X       date     time    size
1   1 2014-07-08 00:54:41   80589
2   2 2014-07-08 00:59:53  321767
3   3 2014-07-08 00:47:13  748063
4   4 2014-07-08 00:48:05  606104
5   6 2014-07-08 00:48:04   77681
6   7 2014-07-08 00:48:35  393754
7   8 2014-07-08 00:47:30   28216
8  10 2014-07-08 00:15:35 2206029
9  11 2014-07-08 00:15:25  526858
10 12 2014-07-08 00:14:45 2351969
.. ..        ...      ...     ...
Variables not shown: r_version (chr),
  r_arch (chr), r_os (chr), package
  (chr), version (chr), country (chr),
  ip_id (int)

| You are really on a roll!

  |===============================================                              |  61%

| Now, use filter() to fetch all rows
| for which size is strictly greater
| than (>) 100500 (no quotes, since
| size is numeric) AND r_os equals
| "linux-gnu". Hint: You are passing
| three arguments to filter(): the
| name of the dataset, the first
| condition, and the second condition.

> 
> filter(cran, size > 100500, r_os == "linux-gnu")
Source: local data frame [33,683 x 11]

    X       date     time    size
1   3 2014-07-08 00:47:13  748063
2   4 2014-07-08 00:48:05  606104
3   7 2014-07-08 00:48:35  393754
4  10 2014-07-08 00:15:35 2206029
5  11 2014-07-08 00:15:25  526858
6  12 2014-07-08 00:14:45 2351969
7  14 2014-07-08 00:15:35 3097729
8  15 2014-07-08 00:14:37  568036
9  16 2014-07-08 00:15:50 1600441
10 18 2014-07-08 00:26:59  186685
.. ..        ...      ...     ...
Variables not shown: r_version (chr),
  r_arch (chr), r_os (chr), package
  (chr), version (chr), country (chr),
  ip_id (int)

| You got it!

  |================================================                             |  63%

| Finally, we want to get only the
| rows for which the r_version is not
| missing. R represents missing values
| with NA and these missing values can
| be detected using the is.na()
| function.

...is.na(c(3, 5, NA, 10))

  |==================================================                           |  64%

| To see how this works, try
| is.na(c(3, 5, NA, 10)).

> 
> "!is.na(c(3, 5, NA, 10))"
[1] "!is.na(c(3, 5, NA, 10))"

| Try again. Getting it right on the
| first try is boring anyway! Or, type
| info() for more options.

| Try is.na(c(3, 5, NA, 10)) to see
| how is.na() works.

> filter(cran, !is.na(r_version))
Source: local data frame [207,205 x 11]

    X       date     time    size
1   1 2014-07-08 00:54:41   80589
2   2 2014-07-08 00:59:53  321767
3   3 2014-07-08 00:47:13  748063
4   4 2014-07-08 00:48:05  606104
5   5 2014-07-08 00:46:50   79825
6   6 2014-07-08 00:48:04   77681
7   7 2014-07-08 00:48:35  393754
8   8 2014-07-08 00:47:30   28216
9  10 2014-07-08 00:15:35 2206029
10 11 2014-07-08 00:15:25  526858
.. ..        ...      ...     ...
Variables not shown: r_version (chr),
  r_arch (chr), r_os (chr), package
  (chr), version (chr), country (chr),
  ip_id (int)

| Give it another try. Or, type info()
| for more options.

| Try is.na(c(3, 5, NA, 10)) to see
| how is.na() works.

> 
> cran2 <- select(cran, size:ip_id)

| You're close...I can feel it! Try it
| again. Or, type info() for more
| options.

| Try is.na(c(3, 5, NA, 10)) to see
| how is.na() works.

> is.na(c(3, 5, NA, 10))"
+ 
+ q
+ q
+ 

> 
> is.na(c(3, 5, NA, 10))
[1] FALSE FALSE  TRUE FALSE

| You nailed it! Good job!

  |===================================================                          |  66%

| Now, put an exclamation point (!)
| before is.na() to change all of the
| TRUEs to FALSEs and all of the
| FALSEs to TRUEs, thus telling us
| what is NOT NA: !is.na(c(3, 5, NA,
| 10)).

> !is.na(c(3, 5, NA, 10))
[1]  TRUE  TRUE FALSE  TRUE

| You are quite good my friend!

  |====================================================                         |  68%

| Okay, ready to put all of this
| together? Use filter() to return all
| rows of cran for which r_version is
| NOT NA. Hint: You will need to use
| !is.na() as part of your second
| argument to filter().

> 
> filter(cran, !is.na(r_version))
Source: local data frame [207,205 x 11]

    X       date     time    size
1   1 2014-07-08 00:54:41   80589
2   2 2014-07-08 00:59:53  321767
3   3 2014-07-08 00:47:13  748063
4   4 2014-07-08 00:48:05  606104
5   5 2014-07-08 00:46:50   79825
6   6 2014-07-08 00:48:04   77681
7   7 2014-07-08 00:48:35  393754
8   8 2014-07-08 00:47:30   28216
9  10 2014-07-08 00:15:35 2206029
10 11 2014-07-08 00:15:25  526858
.. ..        ...      ...     ...
Variables not shown: r_version (chr),
  r_arch (chr), r_os (chr), package
  (chr), version (chr), country (chr),
  ip_id (int)

| You are really on a roll!

  |======================================================                       |  69%

| We've seen how to select a subset of
| columns and rows from our dataset
| using select() and filter(),
| respectively. Inherent in select()
| was also the ability to arrange our
| selected columns in any order we
| please.

...

  |=======================================================                      |  71%

| Sometimes we want to order the rows
| of a dataset according to the values
| of a particular variable. This is
| the job of arrange().

...

  |========================================================                     |  73%

| To see how arrange() works, let's
| first take a subset of cran.
| select() all columns from size
| through ip_id and store the result
| in cran2.

> 
> 
> cran2 <- select(cran, size:ip_id)

| Your dedication is inspiring!

  |=========================================================                    |  75%

| Now, to order the ROWS of cran2 so
| that ip_id is in ascending order
| (from small to large), type
| arrange(cran2, ip_id). You may want
| to make your console wide enough so
| that you can see ip_id, which is the
| last column.

> 
> arrange(cran2, ip_id)
Source: local data frame [225,468 x 8]

     size r_version r_arch
1   80589     3.1.0 x86_64
2  180562     3.0.2 x86_64
3  190120     3.1.0   i386
4  321767     3.1.0 x86_64
5   52281     3.0.3 x86_64
6  876702     3.1.0 x86_64
7  321764     3.0.2 x86_64
8  876702     3.1.0 x86_64
9  321768     3.1.0 x86_64
10 784093     3.1.0 x86_64
..    ...       ...    ...
Variables not shown: r_os (chr),
  package (chr), version (chr),
  country (chr), ip_id (int)

| That's the answer I was looking for.

  |===========================================================                  |  76%

| To do the same, but in descending
| order, change the second argument to
| desc(ip_id), where desc() stands for
| 'descending'. Go ahead.

> arrange(cran2, desc(ip_id))
Source: local data frame [225,468 x 8]

      size r_version r_arch
1     5933        NA     NA
2   569241     3.1.0 x86_64
3   228444     3.1.0 x86_64
4   308962     3.1.0 x86_64
5   950964     3.0.3   i386
6    80185     3.0.3   i386
7  1431750     3.0.3   i386
8  2189695     3.1.0 x86_64
9  4818024     3.1.0   i386
10  197495     3.1.0 x86_64
..     ...       ...    ...
Variables not shown: r_os (chr),
  package (chr), version (chr),
  country (chr), ip_id (int)

| That's the answer I was looking for.

  |============================================================                 |  78%

| We can also arrange the data
| according to the values of multiple
| variables. For example,
| arrange(cran2, package, ip_id) will
| first arrange by package names
| (ascending alphabetically), then by
| ip_id. This means that if there are
| multiple rows with the same value
| for package, they will be sorted by
| ip_id (ascending numerically). Try
| arrange(cran2, package, ip_id) now.

> arrange(cran2, package, ip_id)
Source: local data frame [225,468 x 8]

    size r_version r_arch         r_os
1  71677     3.0.3 x86_64 darwin10.8.0
2  71672     3.1.0 x86_64    linux-gnu
3  71677     3.1.0 x86_64      mingw32
4  70438     3.0.1 x86_64 darwin10.8.0
5  71677        NA     NA           NA
6  71892     3.0.2 x86_64    linux-gnu
7  71677     3.1.0 x86_64    linux-gnu
8  71672     3.1.0 x86_64      mingw32
9  71677     3.0.3 x86_64      mingw32
10 71672     3.1.0 x86_64      mingw32
..   ...       ...    ...          ...
Variables not shown: package (chr),
  version (chr), country (chr), ip_id
  (int)

| You got it right!

  |=============================================================                |  80%

| Arrange cran2 by the following three
| variables, in this order: country
| (ascending), r_version (descending),
| and ip_id (ascending).

> arrange(cran2, country, desc(r_version), ip_id)
Source: local data frame [225,468 x 8]

      size r_version r_arch      r_os
1  1556858     3.1.1   i386   mingw32
2  1823512     3.1.0 x86_64 linux-gnu
3    15732     3.1.0   i686 linux-gnu
4  3014840     3.1.0 x86_64   mingw32
5   660087     3.1.0   i386   mingw32
6   522261     3.1.0   i386   mingw32
7   522263     3.1.0   i386   mingw32
8  1676627     3.1.0 x86_64 linux-gnu
9  2118530     3.1.0 x86_64 linux-gnu
10 2217180     3.1.0 x86_64   mingw32
..     ...       ...    ...       ...
Variables not shown: package (chr),
  version (chr), country (chr), ip_id
  (int)

| All that hard work is paying off!

  |===============================================================              |  81%

| To illustrate the next major
| function in dplyr, let's take
| another subset of our original data.
| Use select() to grab 3 columns --
| ip_id, package, and size (in that
| order) -- and store the result in a
| new variable called cran3.

> cran3 <- select(cran, ip_id, package, size)

| You nailed it! Good job!

  |================================================================             |  83%

| Take a look at cran3 now.

> cran3
Source: local data frame [225,468 x 3]

   ip_id      package    size
1      1    htmltools   80589
2      2      tseries  321767
3      3        party  748063
4      3        Hmisc  606104
5      4       digest   79825
6      3 randomForest   77681
7      3         plyr  393754
8      5      whisker   28216
9      6         Rcpp    5928
10     7     hflights 2206029
..   ...          ...     ...

| Excellent work!

  |=================================================================            |  85%

| It's common to create a new variable
| based on the value of one or more
| variables already in a dataset. The
| mutate() function does exactly this.

...

  |===================================================================          |  86%

| The size variable represents the
| download size in bytes, which are
| units of computer memory. These
| days, megabytes (MB) are a more
| common unit of measurement. One
| megabyte is equal to 2^20 bytes.
| That's 2 to the power of 20, which
| is approximately one million bytes!

...

  |====================================================================         |  88%

| We want to add a column called
| size_mb that contains the download
| size in megabytes. Here's the code
| to do it:
| 
| mutate(cran3, size_mb = size / 2^20)

> mutate(cran3, size_mb = size / 2^20)
Source: local data frame [225,468 x 4]

   ip_id      package    size
1      1    htmltools   80589
2      2      tseries  321767
3      3        party  748063
4      3        Hmisc  606104
5      4       digest   79825
6      3 randomForest   77681
7      3         plyr  393754
8      5      whisker   28216
9      6         Rcpp    5928
10     7     hflights 2206029
..   ...          ...     ...
Variables not shown: size_mb (dbl)

| You got it!

  |=====================================================================        |  90%

| An even larger unit of memory is a
| gigabyte (GB), which equals 2^10
| megabytes. We might as well add
| another column for download size in
| gigabytes!

...

  |======================================================================       |  92%

| One very nice feature of mutate() is
| that you can use the value computed
| for your second column (size_mb) to
| create a third column, all in the
| same line of code. To see this in
| action, repeat the exact same
| command as above, except add a third
| argument creating a column that is
| named size_gb and equal to size_mb /
| 2^10.

> mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
Source: local data frame [225,468 x 5]

   ip_id      package    size
1      1    htmltools   80589
2      2      tseries  321767
3      3        party  748063
4      3        Hmisc  606104
5      4       digest   79825
6      3 randomForest   77681
7      3         plyr  393754
8      5      whisker   28216
9      6         Rcpp    5928
10     7     hflights 2206029
..   ...          ...     ...
Variables not shown: size_mb (dbl),
  size_gb (dbl)

| All that practice is paying off!

  |========================================================================     |  93%

| Let's try one more for practice.
| Pretend we discovered a glitch in
| the system that provided the
| original values for the size
| variable. All of the values in cran3
| are 1000 bytes less than they should
| be. Using cran3, create just one new
| column called correct_size that
| contains the correct size.

> mutate(cran3, correct_size = size + 1000)
Source: local data frame [225,468 x 4]

   ip_id      package    size
1      1    htmltools   80589
2      2      tseries  321767
3      3        party  748063
4      3        Hmisc  606104
5      4       digest   79825
6      3 randomForest   77681
7      3         plyr  393754
8      5      whisker   28216
9      6         Rcpp    5928
10     7     hflights 2206029
..   ...          ...     ...
Variables not shown: correct_size
  (dbl)

| Keep up the great work!

  |=========================================================================    |  95%

| The last of the five core dplyr
| verbs, summarize(), collapses the
| dataset to a single row. Let's say
| we're interested in knowing the
| average download size.
| summarize(cran, avg_bytes =
| mean(size)) will yield the mean
| value of the size variable. Here
| we've chosen to label the result
| 'avg_bytes', but we could have named
| it anything. Give it a try.

> summarize(cran, avg_bytes = mean(size))
Source: local data frame [1 x 1]

  avg_bytes
1  844086.5

| You got it right!

  |==========================================================================   |  97%

| That's not particularly interesting.
| summarize() is most useful when
| working with data that has been
| grouped by the values of a
| particular variable.

...

  |============================================================================ |  98%

| We'll look at grouped data in the
| next lesson, but the idea is that
| summarize() can give you the
| requested value FOR EACH group in
| your dataset.

...

  |=============================================================================| 100%

| In this lesson, you learned how to
| manipulate data using dplyr's five
| main functions. In the next lesson,
| we'll look at how to take advantage
| of some other useful features of
| dplyr to make your life as a data
| analyst much easier.
