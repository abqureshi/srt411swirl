| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Sequences of Numbers    
 3: Vectors                    4: Missing Values          
 5: Subsetting Vectors         6: Matrices and Data Frames
 7: Logic                      8: lapply and sapply       
 9: vapply and tapply         10: Looking at Data         
11: Simulation                12: Dates and Times         


Selection: 1

  |                                                                             |   0%

| In this lesson, we will explore some basic building blocks of the R programming
| language.

...

  |==                                                                           |   3%

| If at any point you'd like more information on a particular topic related to R, you
| can type help.start() at the prompt, which will open a menu of resources (either
| within RStudio or your default web browser, depending on your setup). Alternatively,
| a simple web search often yields the answer you're looking for.

...

  |====                                                                         |   5%

| In its simplest form, R can be used as an interactive calculator. Type 5 + 7 and
| press Enter.

> 
> 5 + 7
[1] 12

| You're the best!

  |======                                                                       |   8%

| R simply prints the result of 12 by default. However, R is a programming language
| and often the reason we use a programming language as opposed to a calculator is to
| automate some process or avoid unnecessary repetition.

...

  |========                                                                     |  11%

| In this case, we may want to use our result from above in a second calculation.
| Instead of retyping 5 + 7 every time we need it, we can just create a new variable
| that stores the result.

...

  |==========                                                                   |  13%

| The way you assign a value to a variable in R is by using the assignment operator,
| which is just a 'less than' symbol followed by a 'minus' sign. It looks like this:
| <-

...

  |============                                                                 |  16%

| Think of the assignment operator as an arrow. You are assigning the value on the
| right side of the arrow to the variable name on the left side of the arrow.

...

  |==============                                                               |  18%

| To assign the result of 5 + 7 to a new variable called x, you type x <- 5 + 7. This
| can be read as 'x gets 5 plus 7'. Give it a try now.

> x <- 5+7

| You're the best!

  |================                                                             |  21%

| You'll notice that R did not print the result of 12 this time. When you use the
| assignment operator, R assumes that you don't want to see the result immediately,
| but rather that you intend to use the result for something else later on.

...

  |==================                                                           |  24%

| To view the contents of the variable x, just type x and press Enter. Try it now.

> 
> X
Error: object 'X' not found
> X
Error: object 'X' not found
> X < - 5+ 7
Error: object 'X' not found
> X
Error: object 'X' not found
> x
[1] 12

| You got it!

  |====================                                                         |  26%

| Now, store the result of x - 3 in a new variable called y.

> y < - x -3
Error: object 'y' not found
> y <- x -3

| All that hard work is paying off!

  |======================                                                       |  29%

| What is the value of y? Type y to find out.

> y
[1] 9

| You nailed it! Good job!

  |========================                                                     |  32%

| Now, let's create a small collection of numbers called a vector. Any object that
| contains data is called a data structure and numeric vectors are the simplest type
| of data structure in R. In fact, even a single number is considered a vector of
| length one.

...

  |==========================                                                   |  34%

| The easiest way to create a vector is with the c() function, which stands for
| 'concatenate' or 'combine'. To create a vector containing the numbers 1.1, 9, and
| 3.14, type c(1.1, 9, 3.14). Try it now and store the result in a variable called z.

> 
> z <- c(1.1, 9, 3.14)

| That's the answer I was looking for.

  |============================                                                 |  37%

| Anytime you have questions about a particular function, you can access R's built-in
| help files via the `?` command. For example, if you want more information on the c()
| function, type ?c without the parentheses that normally follow a function name. Give
| it a try.

> ?c

| Excellent job!

  |==============================                                               |  39%

| Type z to view its contents. Notice that there are no commas separating the values
| in the output.

> z
[1] 1.10 9.00 3.14

| Keep working like that and you'll get there!

  |================================                                             |  42%

| You can combine vectors to make a new vector. Create a new vector that contains z,
| 555, then z again in that order. Don't assign this vector to a new variable, so that
| we can just see the result immediately.

> c(z, 555, z)
[1]   1.10   9.00   3.14 555.00   1.10   9.00   3.14

| You nailed it! Good job!

  |==================================                                           |  45%

| Numeric vectors can be used in arithmetic expressions. Type the following to see
| what happens: z * 2 + 100.

> z * 2 + 100
[1] 102.20 118.00 106.28

| You are quite good my friend!

  |====================================                                         |  47%

| First, R multiplied each of the three elements in z by 2. Then it added 100 to each
| element to get the result you see above.

...

  |======================================                                       |  50%

| Other common arithmetic operators are `+`, `-`, `/`, and `^` (where x^2 means 'x
| squared'). To take the square root, use the sqrt() function and to take the absolute
| value, use the abs() function.

...

  |=========================================                                    |  53%

| Take the square root of z - 1 and assign it to a new variable called my_sqrt.

> my_sqrt <- sqrt(z - 1)

| You are amazing!

  |===========================================                                  |  55%

| Before we view the contents of the my_sqrt variable, what do you think it contains?

1: a vector of length 0 (i.e. an empty vector)
2: a single number (i.e a vector of length 1)
3: a vector of length 3

Selection: 3

| That's the answer I was looking for.

  |=============================================                                |  58%

| Print the contents of my_sqrt.

> my_sqrt
[1] 0.3162278 2.8284271 1.4628739

| You are really on a roll!

  |===============================================                              |  61%

| As you may have guessed, R first subtracted 1 from each element of z, then took the
| square root of each element. This leaves you with a vector of the same length as the
| original vector z.

...

  |=================================================                            |  63%

| Now, create a new variable called my_div that gets the value of z divided by
| my_sqrt.

> my_div <- z / my_sqrt

| That's the answer I was looking for.

  |===================================================                          |  66%

| Which statement do you think is true?

1: my_div is undefined
2: The first element of my_div is equal to the first element of z divided by the first element of my_sqrt, and so on...
3: my_div is a single number (i.e a vector of length 1)

Selection: 2

| You got it right!

  |=====================================================                        |  68%

| Go ahead and print the contents of my_div.

> 
> my_div
[1] 3.478505 3.181981 2.146460

| Keep working like that and you'll get there!

  |=======================================================                      |  71%

| When given two vectors of the same length, R simply performs the specified
| arithmetic operation (`+`, `-`, `*`, etc.) element-by-element. If the vectors are of
| different lengths, R 'recycles' the shorter vector until it is the same length as
| the longer vector.

...

  |=========================================================                    |  74%

| When we did z * 2 + 100 in our earlier example, z was a vector of length 3, but
| technically 2 and 100 are each vectors of length 1.

...

  |===========================================================                  |  76%

| Behind the scenes, R is 'recycling' the 2 to make a vector of 2s and the 100 to make
| a vector of 100s. In other words, when you ask R to compute z * 2 + 100, what it
| really computes is this: z * c(2, 2, 2) + c(100, 100, 100).

...

  |=============================================================                |  79%

| To see another example of how this vector 'recycling' works, try adding c(1, 2, 3,
| 4) and c(0, 10). Don't worry about saving the result in a new variable.

> c(1, 2, 3, 4) + c(0, 10)
[1]  1 12  3 14

| You are amazing!

  |===============================================================              |  82%

| If the length of the shorter vector does not divide evenly into the length of the
| longer vector, R will still apply the 'recycling' method, but will throw a warning
| to let you know something fishy might be going on.

...

  |=================================================================            |  84%

| Try c(1, 2, 3, 4) + c(0, 10, 100) for an example.

> c(1, 2, 3, 4) + c(0, 10, 100)
[1]   1  12 103   4
Warning message:
In c(1, 2, 3, 4) + c(0, 10, 100) :
  longer object length is not a multiple of shorter object length

| That's the answer I was looking for.

  |===================================================================          |  87%

| Before concluding this lesson, I'd like to show you a couple of time-saving tricks.

...

  |=====================================================================        |  89%

| Earlier in the lesson, you computed z * 2 + 100. Let's pretend that you made a
| mistake and that you meant to add 1000 instead of 100. You could either re-type the
| expression, or...

...

  |=======================================================================      |  92%

| In many programming environments, the up arrow will cycle through previous commands.
| Try hitting the up arrow on your keyboard until you get to this command (z * 2 +
| 100), then change 100 to 1000 and hit Enter. If the up arrow doesn't work for you,
| just type the corrected command.

> 
> c(1, 2, 3, 4) + c(0, 10, 100)
[1]   1  12 103   4
Warning message:
In c(1, 2, 3, 4) + c(0, 10, 100) :
  longer object length is not a multiple of shorter object length

| Not quite! Try again. Or, type info() for more options.

| If your environment does not support the up arrow feature, then just type the
| corrected command to move on.

> z * 2 + 100
[1] 102.20 118.00 106.28

| Keep trying! Or, type info() for more options.

| If your environment does not support the up arrow feature, then just type the
| corrected command to move on.

> z * 2 + 1000
[1] 1002.20 1018.00 1006.28

| That's a job well done!

  |=========================================================================    |  95%

| Finally, let's pretend you'd like to view the contents of a variable that you
| created earlier, but you can't seem to remember if you named it my_div or myDiv. You
| could try both and see what works, or...

...

  |===========================================================================  |  97%

| You can type the first two letters of the variable name, then hit the Tab key
| (possibly more than once). Most programming environments will provide a list of
| variables that you've created that begin with 'my'. This is called auto-completion
| and can be quite handy when you have many variables in your workspace. Give it a
| try. (If auto-completion doesn't work for you, just type my_div and press Enter.)

> 
> my_div
[1] 3.478505 3.181981 2.146460

| You got it right!

  |=============================================================================| 100%

| Would you like to inform someone about your successful completion of this lesson?

1: No
2: Yes

Selection: 2
| What is your full name?
Abu Qureshi
| What is the email address of the person you'd like to notify?
abqureshi@myseneca.ca

Does everything look good?

Your name: Abu Qureshi
Send to: abqureshi@myseneca.ca

1: Yes
2: No

Selection: 2
| What is your full name?
abqureshi@myseneca.ca
| What is the email address of the person you'd like to notify?
mike.martin@senecacollege.ca

Does everything look good?

Your name: abqureshi@myseneca.ca
Send to: mike.martin@senecacollege.ca

1: Yes
2: No

Selection: 1

#####################################################################################

I just tried to create a new email with the following info:

To: mike.martin@senecacollege.ca
Subject: abqureshi@myseneca.ca just completed R Programming - Basic Building Blocks
Body: <empty>

If it didn't work, you can send the same email manually.

#####################################################################################


| Great job!

| You've reached the end of this lesson! Returning to the main menu...

| Would you like to continue with one of these lessons?

1: R Programming Workspace and Files
2: No. Let me start something new.

Selection: 2

  |                                                                             |   0%

| In this lesson, you'll learn how to create sequences of numbers in R.

...

  |===                                                                          |   4%

| The simplest way to create a sequence of numbers in R is by using the `:` operator.
| Type 1:20 to see how it works.

> 
> :
Error: unexpected ':' in ":"
> 1:20
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20

| You are amazing!

  |=======                                                                      |   9%

| That gave us every integer between (and including) 1 and 20. We could also use it to
| create a sequence of real numbers. For example, try pi:10.

> pi:10
[1] 3.141593 4.141593 5.141593 6.141593 7.141593 8.141593 9.141593

| Nice work!

  |==========                                                                   |  13%

| The result is a vector of real numbers starting with pi (3.142...) and increasing in
| increments of 1. The upper limit of 10 is never reached, since the next number in
| our sequence would be greater than 10.

...

  |=============                                                                |  17%

| What happens if we do 15:1? Give it a try to find out.

> 15:1
 [1] 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1

| That's correct!

  |=================                                                            |  22%

| It counted backwards in increments of 1! It's unlikely we'd want this behavior, but
| nonetheless it's good to know how it could happen.

...

  |====================                                                         |  26%

| Remember that if you have questions about a particular R function, you can access
| its documentation with a question mark followed by the function name:
| ?function_name_here. However, in the case of an operator like the colon used above,
| you must enclose the symbol in backticks like this: ?`:`. (NOTE: The backtick (`)
| key is generally located in the top left corner of a keyboard, above the Tab key. If
| you don't have a backtick key, you can use regular quotes.)

...?:

  |=======================                                                      |  30%

| Pull up the documentation for `:` now.

> :
Error: unexpected ':' in ":"
> ?':'

| You got it right!

  |===========================                                                  |  35%

| Often, we'll desire more control over a sequence we're creating than what the `:`
| operator gives us. The seq() function serves this purpose.

...

  |==============================                                               |  39%

| The most basic use of seq() does exactly the same thing as the `:` operator. Try
| seq(1, 20) to see this.

> seq(1,20)
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20

| You are quite good my friend!

  |=================================                                            |  43%

| This gives us the same output as 1:20. However, let's say that instead we want a
| vector of numbers ranging from 0 to 10, incremented by 0.5. seq(0, 10, by=0.5) does
| just that. Try it out.

> seq(0,10,by=.5)
 [1]  0.0  0.5  1.0  1.5  2.0  2.5  3.0  3.5  4.0  4.5  5.0  5.5  6.0  6.5  7.0  7.5
[17]  8.0  8.5  9.0  9.5 10.0

| Excellent job!

  |=====================================                                        |  48%

| Or maybe we don't care what the increment is and we just want a sequence of 30
| numbers between 5 and 10. seq(5, 10, length=30) does the trick. Give it shot now and
| store the result in a new variable called my_seq.

> my_seq <- seq(5,10 length=30)
Error: unexpected symbol in "my_seq <- seq(5,10 length"
> my_seq <- seq(5,10, length=30)

| You got it right!

  |========================================                                     |  52%

| To confirm that my_seq has length 30, we can use the length() function. Try it now.

> length(my_seq)
[1] 30

| All that practice is paying off!

  |============================================                                 |  57%

| Let's pretend we don't know the length of my_seq, but we want to generate a sequence
| of integers from 1 to N, where N represents the length of the my_seq vector. In
| other words, we want a new vector (1, 2, 3, ...) that is the same length as my_seq.

...

  |===============================================                              |  61%

| There are several ways we could do this. One possibility is to combine the `:`
| operator and the length() function like this: 1:length(my_seq). Give that a try.

> 1:length(my_seq)
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27
[28] 28 29 30

| Keep working like that and you'll get there!

  |==================================================                           |  65%

| Another option is to use seq(along.with = my_seq). Give that a try.

> 
> seq(along.with = my_seq)
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27
[28] 28 29 30

| Keep working like that and you'll get there!

  |======================================================                       |  70%

| However, as is the case with many common tasks, R has a separate built-in function
| for this purpose called seq_along(). Type seq_along(my_seq) to see it in action.

> seq_along(my_seq)
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27
[28] 28 29 30

| You're the best!

  |=========================================================                    |  74%

| There are often several approaches to solving the same problem, particularly in R.
| Simple approaches that involve less typing are generally best. It's also important
| for your code to be readable, so that you and others can figure out what's going on
| without too much hassle.

...

  |============================================================                 |  78%

| If R has a built-in function for a particular task, it's likely that function is
| highly optimized for that purpose and is your best option. As you become a more
| advanced R programmer, you'll design your own functions to perform tasks when there
| are no better options. We'll explore writing your own functions in future lessons.

...

  |================================================================             |  83%

| One more function related to creating sequences of numbers is rep(), which stands
| for 'replicate'. Let's look at a few uses.

...

  |===================================================================          |  87%

| If we're interested in creating a vector that contains 40 zeros, we can use rep(0,
| times = 40). Try it out.

> rep(0,times=40)
 [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

| You got it!

  |======================================================================       |  91%

| If instead we want our vector to contain 10 repetitions of the vector (0, 1, 2), we
| can do rep(c(0, 1, 2), times = 10). Go ahead.

> 
> rep(c(0,1,2),times=10)
 [1] 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2

| That's correct!

  |==========================================================================   |  96%

| Finally, let's say that rather than repeating the vector (0, 1, 2) over and over
| again, we want our vector to contain 10 zeros, then 10 ones, then 10 twos. We can do
| this with the `each` argument. Try rep(c(0, 1, 2), each = 10).

> rep(c(0,1,2),each = 10)
 [1] 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2

| All that practice is paying off!

  |=============================================================================| 100%

| Would you like to inform someone about your successful completion of this lesson?

1: No
2: Yes

Selection: 2
| What is your full name?
abqureshi@myseneca.ca
| What is the email address of the person you'd like to notify?
mike.martin@senecacollege.ca

Does everything look good?

Your name: abqureshi@myseneca.ca
Send to: mike.martin@senecacollege.ca

1: Yes
2: No

Selection: 1

#####################################################################################

I just tried to create a new email with the following info:

To: mike.martin@senecacollege.ca
Subject: abqureshi@myseneca.ca just completed R Programming - Sequences of Numbers
Body: <empty>

If it didn't work, you can send the same email manually.

#####################################################################################


| Excellent job!

| You've reached the end of this lesson! Returning to the main menu...

| Please choose a course, or type 0 to exit swirl.

| Please choose a lesson, or type 0 to return to course menu.

 1: Basic Building Blocks      2: Sequences of Numbers    
 3: Vectors                    4: Missing Values          
 5: Subsetting Vectors         6: Matrices and Data Frames
 7: Logic                      8: lapply and sapply       
 9: vapply and tapply         10: Looking at Data         
11: Simulation                12: Dates and Times         


Selection: 3

  |                                                                             |   0%

| The simplest and most common data structure in R is the vector.

...

  |==                                                                           |   3%

| Vectors come in two different flavors: atomic vectors and lists. An atomic vector
| contains exactly one data type, whereas a list may contain multiple data types.
| We'll explore atomic vectors further before we get to lists.

...

  |====                                                                         |   5%

| In previous lessons, we dealt entirely with numeric vectors, which are one type of
| atomic vector. Other types of atomic vectors include logical, character, integer,
| and complex. In this lesson, we'll take a closer look at logical and character
| vectors.

...

  |======                                                                       |   8%

| Logical vectors can contain the values TRUE, FALSE, and NA (for 'not available').
| These values are generated as the result of logical 'conditions'. Let's experiment
| with some simple conditions.

...

  |========                                                                     |  11%

| First, create a numeric vector num_vect that contains the values 0.5, 55, -10, and
| 6.

> num_vect <- 0.5,55,-10,6
Error: unexpected ',' in "num_vect <- 0.5,"
> num_vect <- (0.5,55,-10,6)
Error: unexpected ',' in "num_vect <- (0.5,"
> num_vect <- ("0.5,55,-10,6")

| Not quite! Try again. Or, type info() for more options.

| Recall that the c() function is used for creating a vector. If you forget how to use
| it, use ?c to access the help file. Don't forget to assign the result to a new
| variable called num_vect.

> c(0,5,55,-10,6)
[1]   0   5  55 -10   6

| Not exactly. Give it another go. Or, type info() for more options.

| Recall that the c() function is used for creating a vector. If you forget how to use
| it, use ?c to access the help file. Don't forget to assign the result to a new
| variable called num_vect.

> num_vect <- c(0.5, 55, -10, 6)

| You are amazing!

  |==========                                                                   |  13%

| Now, create a variable called tf that gets the result of num_vect < 1, which is read
| as 'num_vect is less than 1'.

> tf <- num_vect < 1

| You're the best!

  |============                                                                 |  16%

| What do you think tf will look like?

1: a single logical value
2: a vector of 4 logical values

Selection: 2

| You are doing so well!

  |==============                                                               |  18%

| Print the contents of tf now.

> 
> tf
[1]  TRUE FALSE  TRUE FALSE

| Excellent job!

  |================                                                             |  21%

| The statement num_vect < 1 is a condition and tf tells us whether each corresponding
| element of our numeric vector num_vect satisfies this condition.

...

  |==================                                                           |  24%

| The first element of num_vect is 0.5, which is less than 1 and therefore the
| statement 0.5 < 1 is TRUE. The second element of num_vect is 55, which is greater
| than 1, so the statement 55 < 1 is FALSE. The same logic applies for the third and
| fourth elements.

...

  |====================                                                         |  26%

| Let's try another. Type num_vect >= 6 without assigning the result to a new
| variable.

> num_vect >= 6
[1] FALSE  TRUE FALSE  TRUE

| Your dedication is inspiring!

  |======================                                                       |  29%

| This time, we are asking whether each individual element of num_vect is greater than
| OR equal to 6. Since only 55 and 6 are greater than or equal to 6, the second and
| fourth elements of the result are TRUE and the first and third elements are FALSE.

...

  |========================                                                     |  32%

| The `<` and `>=` symbols in these examples are called 'logical operators'. Other
| logical operators include `>`, `<=`, `==` for exact equality, and `!=` for
| inequality.

...

  |==========================                                                   |  34%

| If we have two logical expressions, A and B, we can ask whether at least one is TRUE
| with A | B (logical 'or' a.k.a. 'union') or whether they are both TRUE with A & B
| (logical 'and' a.k.a. 'intersection'). Lastly, !A is the negation of A and is TRUE
| when A is FALSE and vice versa.

...

  |============================                                                 |  37%

| It's a good idea to spend some time playing around with various combinations of
| these logical operators until you get comfortable with their use. We'll do a few
| examples here to get you started.

...

  |==============================                                               |  39%

| Try your best to predict the result of each of the following statements. You can use
| pencil and paper to work them out if it's helpful. If you get stuck, just guess and
| you've got a 50% chance of getting the right answer!

...

  |================================                                             |  42%

| (3 > 5) & (4 == 4)

1: FALSE
2: TRUE

Selection: 2

| Not quite, but you're learning! Try again.

| Break this problem down into 2 pieces. The `&` in the middle states that BOTH pieces
| are TRUE. Your job is to figure out if that is an accurate statement. If so, the
| entire condition is TRUE. If not, it's FALSE.

1: FALSE
2: TRUE

Selection: 1

| You got it right!

  |==================================                                           |  45%

| (TRUE == TRUE) | (TRUE == FALSE)

1: FALSE
2: TRUE

Selection: 
Enter an item from the menu, or 0 to exit
Selection: 1

| One more time. You can do it!

| Break this problem down into 2 pieces. The `|` in the middle states that AT LEAST
| ONE of the pieces is TRUE. Your job is to figure out if that is an accurate
| statement. If so, the entire condition is TRUE. If not, it's FALSE.

1: TRUE
2: FALSE

Selection: 2

| You're close...I can feel it! Try it again.

| Break this problem down into 2 pieces. The `|` in the middle states that AT LEAST
| ONE of the pieces is TRUE. Your job is to figure out if that is an accurate
| statement. If so, the entire condition is TRUE. If not, it's FALSE.

1: TRUE
2: FALSE

Selection: 2

| Not exactly. Give it another go.

| Break this problem down into 2 pieces. The `|` in the middle states that AT LEAST
| ONE of the pieces is TRUE. Your job is to figure out if that is an accurate
| statement. If so, the entire condition is TRUE. If not, it's FALSE.

1: FALSE
2: TRUE

Selection: 1

| One more time. You can do it!

| Break this problem down into 2 pieces. The `|` in the middle states that AT LEAST
| ONE of the pieces is TRUE. Your job is to figure out if that is an accurate
| statement. If so, the entire condition is TRUE. If not, it's FALSE.

1: FALSE
2: TRUE

Selection: 
Enter an item from the menu, or 0 to exit
Selection: 1

| You're close...I can feel it! Try it again.

| Break this problem down into 2 pieces. The `|` in the middle states that AT LEAST
| ONE of the pieces is TRUE. Your job is to figure out if that is an accurate
| statement. If so, the entire condition is TRUE. If not, it's FALSE.

1: FALSE
2: TRUE

Selection: 2

| You nailed it! Good job!

  |====================================                                         |  47%

| ((111 >= 111) | !(TRUE)) & ((4 + 1) == 5)

1: TRUE
2: FALSE

Selection: 2

| Not exactly. Give it another go.

| This is a tricky one. Remember that the `!` symbol negates whatever comes after it.
| There's also an 'order of operations' going on here. Conditions that are enclosed
| within parentheses should be evaluated first. Then, work your way outwards.

1: TRUE
2: FALSE

Selection: 1

| Nice work!

  |======================================                                       |  50%

| Don't worry if you found these to be tricky. They're supposed to be. Working with
| logical statements in R takes practice, but your efforts will be rewarded in future
| lessons (e.g. subsetting and control structures).

...

  |=========================================                                    |  53%

| Character vectors are also very common in R. Double quotes are used to distinguish
| character objects, as in the following example.

...

  |===========================================                                  |  55%

| Create a character vector that contains the following words: "My", "name", "is".
| Remember to enclose each word in its own set of double quotes, so that R knows they
| are character strings. Store the vector in a variable called my_char.

> 
> my_char <- c("My", "name", "is")

| Your dedication is inspiring!

  |=============================================                                |  58%

| Print the contents of my_char to see what it looks like.

> my_char
[1] "My"   "name" "is"  

| Nice work!

  |===============================================                              |  61%

| Right now, my_char is a character vector of length 3. Let's say we want to join the
| elements of my_char together into one continuous character string (i.e. a character
| vector of length 1). We can do this using the paste() function.

...

  |=================================================                            |  63%

| Type paste(my_char, collapse = " ") now. Make sure there's a space between the
| double quotes in the `collapse` argument. You'll see why in a second.

> 
> (my_char, collapse = " ")
Error: unexpected ',' in "(my_char,"
> paste(my_char, collapse = " ")
[1] "My name is"

| You nailed it! Good job!

  |===================================================                          |  66%

| The `collapse` argument to the paste() function tells R that when we join together
| the elements of the my_char character vector, we'd like to separate them with single
| spaces.

...

  |=====================================================                        |  68%

| It seems that we're missing something.... Ah, yes! Your name!

...

  |=======================================================                      |  71%

| To add (or 'concatenate') your name to the end of my_char, use the c() function like
| this: c(my_char, "your_name_here"). Place your name in double quotes where I've put
| "your_name_here". Try it now, storing the result in a new variable called my_name.

> 
> my_name <- c(my_char, "Swirl")

| You are doing so well!

  |=========================================================                    |  74%

| Take a look at the contents of my_name.

> my_name
[1] "My"    "name"  "is"    "Swirl"

| Excellent job!

  |===========================================================                  |  76%

| Now, use the paste() function once more to join the words in my_name together into a
| single character string. Don't forget to say collapse = " "!

> 
> 
> paste(my_name, collapse = " ")
[1] "My name is Swirl"

| That's a job well done!

  |=============================================================                |  79%

| In this example, we used the paste() function to collapse the elements of a single
| character vector. paste() can also be used to join the elements of multiple
| character vectors.

...

  |===============================================================              |  82%

| In the simplest case, we can join two character vectors that are each of length 1
| (i.e. join two words). Try paste("Hello", "world!", sep = " "), where the `sep`
| argument tells R that we want to separate the joined elements with a single space.

> 
> paste("Hello", "world!", sep = " ")
[1] "Hello world!"

| You are doing so well!

  |=================================================================            |  84%

| For a slightly more complicated example, we can join two vectors, each of length 3.
| Use paste() to join the integer vector 1:3 with the character vector c("X", "Y",
| "Z"). This time, use sep = "" to leave no space between the joined elements.

> 
> paste(1:3, c("X", "Y", "Z"), sep = "")
[1] "1X" "2Y" "3Z"

| Keep working like that and you'll get there!

  |===================================================================          |  87%

| What do you think will happen if our vectors are of different length? (Hint: we
| talked about this in a previous lesson.)

...

  |=====================================================================        |  89%

| Vector recycling! Try paste(LETTERS, 1:4, sep = "-"), where LETTERS is a predefined
| variable in R containing a character vector of all 26 letters in the English
| alphabet.

> paste(LETTERS, 1:4, sep = "-")
 [1] "A-1" "B-2" "C-3" "D-4" "E-1" "F-2" "G-3" "H-4" "I-1" "J-2" "K-3" "L-4" "M-1"
[14] "N-2" "O-3" "P-4" "Q-1" "R-2" "S-3" "T-4" "U-1" "V-2" "W-3" "X-4" "Y-1" "Z-2"

| You are doing so well!

  |=======================================================================      |  92%

| Since the character vector LETTERS is longer than the numeric vector 1:4, R simply
| recycles, or repeats, 1:4 until it matches the length of LETTERS.

...

  |=========================================================================    |  95%

| Also worth noting is that the numeric vector 1:4 gets 'coerced' into a character
| vector by the paste() function.

...

  |===========================================================================  |  97%

| We'll discuss coercion in another lesson, but all it really means that the numbers
| 1, 2, 3, and 4 in the output above are no longer numbers to R, but rather characters
| "1", "2", "3", and "4".

...

  |=============================================================================| 100%

| Would you like to inform someone about your successful completion of this lesson?

1: Yes
2: No

Selection: 1
| What is your full name?
abqureshi@myseneca.ca
| What is the email address of the person you'd like to notify?
mike.martin@senecacollege.ca

Does everything look good?

Your name: abqureshi@myseneca.ca
Send to: mike.martin@senecacollege.ca

1: Yes
2: No

Selection: 1

#####################################################################################

I just tried to create a new email with the following info:

To: mike.martin@senecacollege.ca
Subject: abqureshi@myseneca.ca just completed R Programming - Vectors
Body: <empty>

If it didn't work, you can send the same email manually.

#####################################################################################


| Your dedication is inspiring!

| You've reached the end of this lesson! Returning to the main menu...

