Selection: 1

| Attemping to load lesson dependencies...

| Package <U+0091>dplyr<U+0092> loaded correctly!



| I've made the dataset available to you in
| a data frame called mydf. Put it in a
| 'data frame tbl' using the tbl_df()
| function and store the result in a
| variable called cran. If you're not sure
| what I'm talking about, you should start
| with the previous lesson. Otherwise,
| practice makes perfect!

> 
> cran <- tbl_df(mydf)

| Great job!

  |========                                                                     |  10%

| To avoid confusion and keep things running
| smoothly, let's remove the original
| dataframe from your workspace with
| rm("mydf").

> cran <- tbl_df(mydf)

| Try again. Getting it right on the first
| try is boring anyway! Or, type info() for
| more options.

| Use rm("mydf") to remove the original
| dataframe from your workspace.

> rm("mydf")

| Your dedication is inspiring!

  |=========                                                                    |  12%

| Print cran to the console.

> cran
Source: local data frame [225,468 x 11]

    X       date     time    size r_version
1   1 2014-07-08 00:54:41   80589     3.1.0
2   2 2014-07-08 00:59:53  321767     3.1.0
3   3 2014-07-08 00:47:13  748063     3.1.0
4   4 2014-07-08 00:48:05  606104     3.1.0
5   5 2014-07-08 00:46:50   79825     3.0.2
6   6 2014-07-08 00:48:04   77681     3.1.0
7   7 2014-07-08 00:48:35  393754     3.1.0
8   8 2014-07-08 00:47:30   28216     3.0.2
9   9 2014-07-08 00:54:58    5928        NA
10 10 2014-07-08 00:15:35 2206029     3.0.2
.. ..        ...      ...     ...       ...
Variables not shown: r_arch (chr), r_os
  (chr), package (chr), version (chr),
  country (chr), ip_id (int)

| All that hard work is paying off!

  |===========                                                                  |  14%

| Our first goal is to group the data by
| package name. Bring up the help file for
| group_by().

> ?group_by

| Keep up the great work!

  |============                                                                 |  16%

| Group cran by the package variable and
| store the result in a new variable called
| by_package.

> by_package <- group_by(cran, package)

| You are quite good my friend!

  |==============                                                               |  18%

| Let's take a look at by_package. Print it
| to the console.

> 
> by_package
Source: local data frame [225,468 x 11]
Groups: package

    X       date     time    size r_version
1   1 2014-07-08 00:54:41   80589     3.1.0
2   2 2014-07-08 00:59:53  321767     3.1.0
3   3 2014-07-08 00:47:13  748063     3.1.0
4   4 2014-07-08 00:48:05  606104     3.1.0
5   5 2014-07-08 00:46:50   79825     3.0.2
6   6 2014-07-08 00:48:04   77681     3.1.0
7   7 2014-07-08 00:48:35  393754     3.1.0
8   8 2014-07-08 00:47:30   28216     3.0.2
9   9 2014-07-08 00:54:58    5928        NA
10 10 2014-07-08 00:15:35 2206029     3.0.2
.. ..        ...      ...     ...       ...
Variables not shown: r_arch (chr), r_os
  (chr), package (chr), version (chr),
  country (chr), ip_id (int)

| That's the answer I was looking for.

  |===============                                                              |  20%

| At the top of the output above, you'll see
| 'Groups: package', which tells us that
| this tbl has been grouped by the package
| variable. Everything else looks the same,
| but now any operation we apply to the
| grouped data will take place on a per
| package basis.

...

  |=================                                                            |  22%

| Recall that when we applied mean(size) to
| the original tbl_df via summarize(), it
| returned a single number -- the mean of
| all values in the size column. We may care
| about what that number is, but wouldn't it
| be so much more interesting to look at the
| mean download size for each unique
| package?

...

  |==================                                                           |  24%

| That's exactly what you'll get if you use
| summarize() to apply mean(size) to the
| grouped data in by_package. Give it a
| shot.

> 
> 
> summarize(by_package, mean(size))
Source: local data frame [6,023 x 2]

       package mean(size)
1           A3   62194.96
2  ABCExtremes   22904.33
3     ABCoptim   17807.25
4        ABCp2   30473.33
5       ACCLMA   33375.53
6          ACD   99055.29
7         ACNE   96099.75
8        ACTCD  134746.27
9    ADGofTest   12262.91
10        ADM3 1077203.47
..         ...        ...

| Great job!